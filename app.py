import streamlit as st
import numpy as np
from PIL import Image, UnidentifiedImageError
import base64
import io
import matplotlib.pyplot as plt
from fpdf import FPDF

# --- Traducciones multiling√ºes ---
translations = {
    "Espa√±ol": {
        "title": "Predicci√≥n de C√°ncer de Piel (Simulado)",
        "upload": "Sube una imagen de lesi√≥n en la piel",
        "button": "Analizar Imagen",
        "result": "Resultado (simulado)",
        "confidence": "Confianza Estimada",
        "download": "Descargar PDF",
        "error": "‚ùå Error al procesar la imagen. Aseg√∫rate de que sea un archivo v√°lido.",
        "chart": "Gr√°fico de Confianza por Modelo",
        "recommendation_malignant": "Recomendamos acudir a un dermat√≥logo para una evaluaci√≥n profesional.",
        "recommendation_benign": "No se detectan signos alarmantes, pero es buena pr√°ctica hacer controles peri√≥dicos.",
        "pdf_title": "Resultado del An√°lisis de C√°ncer de Piel",
        "pdf_result": "Resultado",
        "pdf_confidence": "Confianza estimada",
        "pdf_recommendation": "Recomendaci√≥n",
        "pdf_image_label": "Imagen analizada"
    },
    "English": {
        "title": "Skin Cancer Prediction (Simulated)",
        "upload": "Upload a skin lesion image",
        "button": "Analyze Image",
        "result": "Result (simulated)",
        "confidence": "Estimated Confidence",
        "download": "Download PDF",
        "error": "‚ùå Error processing the image. Please make sure it's a valid file.",
        "chart": "Confidence Chart by Model",
        "recommendation_malignant": "We recommend visiting a dermatologist for professional evaluation.",
        "recommendation_benign": "No alarming signs detected, but regular checkups are advisable.",
        "pdf_title": "Skin Cancer Analysis Result",
        "pdf_result": "Result",
        "pdf_confidence": "Estimated confidence",
        "pdf_recommendation": "Recommendation",
        "pdf_image_label": "Analyzed Image"
    },
    "Fran√ßais": {
        "title": "Pr√©diction du cancer de la peau (simul√©e)",
        "upload": "T√©l√©versez une image de l√©sion cutan√©e",
        "button": "Analyser l'image",
        "result": "R√©sultat (simul√©)",
        "confidence": "Confiance estim√©e",
        "download": "T√©l√©charger le PDF",
        "error": "‚ùå Erreur de traitement de l‚Äôimage. Assurez-vous qu‚Äôil s‚Äôagisse d‚Äôun fichier valide.",
        "chart": "Graphique de confiance par mod√®le",
        "recommendation_malignant": "Nous vous recommandons de consulter un dermatologue pour une √©valuation.",
        "recommendation_benign": "Aucun signe inqui√©tant d√©tect√©, mais des contr√¥les r√©guliers sont recommand√©s.",
        "pdf_title": "R√©sultat de l'analyse du cancer de la peau",
        "pdf_result": "R√©sultat",
        "pdf_confidence": "Confiance estim√©e",
        "pdf_recommendation": "Recommandation",
        "pdf_image_label": "Image analys√©e"
    },
    "Deutsch": {
        "title": "Hautkrebs-Vorhersage (Simuliert)",
        "upload": "Laden Sie ein Bild der Hautl√§sion hoch",
        "button": "Bild analysieren",
        "result": "Ergebnis (simuliert)",
        "confidence": "Gesch√§tzte Zuverl√§ssigkeit",
        "download": "PDF herunterladen",
        "error": "‚ùå Fehler beim Verarbeiten des Bildes. Bitte stellen Sie sicher, dass es sich um eine g√ºltige Datei handelt.",
        "chart": "Vertrauensdiagramm nach Modell",
        "recommendation_malignant": "Wir empfehlen, einen Dermatologen f√ºr eine professionelle Bewertung aufzusuchen.",
        "recommendation_benign": "Keine alarmierenden Anzeichen, aber regelm√§√üige Kontrollen sind ratsam.",
        "pdf_title": "Ergebnis der Hautkrebsanalyse",
        "pdf_result": "Ergebnis",
        "pdf_confidence": "Gesch√§tzte Zuverl√§ssigkeit",
        "pdf_recommendation": "Empfehlung",
        "pdf_image_label": "Analysiertes Bild"
    },
    "Portugu√™s": {
        "title": "Predi√ß√£o de C√¢ncer de Pele (Simulado)",
        "upload": "Envie uma imagem de les√£o na pele",
        "button": "Analisar Imagem",
        "result": "Resultado (simulado)",
        "confidence": "Confian√ßa Estimada",
        "download": "Baixar PDF",
        "error": "‚ùå Erro ao processar a imagem. Certifique-se de que √© um arquivo v√°lido.",
        "chart": "Gr√°fico de Confian√ßa por Modelo",
        "recommendation_malignant": "Recomenda-se procurar um dermatologista para uma avalia√ß√£o profissional.",
        "recommendation_benign": "Sem sinais alarmantes, mas exames regulares s√£o recomendados.",
        "pdf_title": "Resultado da An√°lise de C√¢ncer de Pele",
        "pdf_result": "Resultado",
        "pdf_confidence": "Confian√ßa estimada",
        "pdf_recommendation": "Recomenda√ß√£o",
        "pdf_image_label": "Imagem analisada"
    },
    "Italiano": {
        "title": "Previsione del Cancro della Pelle (Simulato)",
        "upload": "Carica un'immagine della lesione cutanea",
        "button": "Analizza Immagine",
        "result": "Risultato (simulato)",
        "confidence": "Affidabilit√† stimata",
        "download": "Scarica PDF",
        "error": "‚ùå Errore durante l'elaborazione dell'immagine. Assicurati che il file sia valido.",
        "chart": "Grafico di Affidabilit√† per Modello",
        "recommendation_malignant": "Si consiglia di consultare un dermatologo per una valutazione professionale.",
        "recommendation_benign": "Nessun segno allarmante rilevato, ma controlli regolari sono consigliati.",
        "pdf_title": "Risultato dell'Analisi del Cancro della Pelle",
        "pdf_result": "Risultato",
        "pdf_confidence": "Affidabilit√† stimata",
        "pdf_recommendation": "Raccomandazione",
        "pdf_image_label": "Immagine analizzata"
    },
    "Êó•Êú¨Ë™û": {
        "title": "ÁöÆËÜö„Åå„Çì‰∫àÊ∏¨Ôºà„Ç∑„Éü„É•„É¨„Éº„Ç∑„Éß„É≥Ôºâ",
        "upload": "ÁöÆËÜöÁóÖÂ§â„ÅÆÁîªÂÉè„Çí„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Åó„Å¶„Åè„Å†„Åï„ÅÑ",
        "button": "ÁîªÂÉè„ÇíËß£Êûê„Åô„Çã",
        "result": "ÁµêÊûúÔºà„Ç∑„Éü„É•„É¨„Éº„ÉàÔºâ",
        "confidence": "Êé®ÂÆö‰ø°È†ºÂ∫¶",
        "download": "PDF„Çí„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ",
        "error": "‚ùå ÁîªÂÉè„ÅÆÂá¶ÁêÜ‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇÊ≠£„Åó„ÅÑ„Éï„Ç°„Ç§„É´„Åß„ÅÇ„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ",
        "chart": "„É¢„Éá„É´Âà•‰ø°È†ºÂ∫¶„ÉÅ„É£„Éº„Éà",
        "recommendation_malignant": "Â∞ÇÈñÄÁöÑ„Å™Ë©ï‰æ°„ÅÆ„Åü„ÇÅ„Å´ÁöÆËÜöÁßëÂåª„ÅÆË®∫ÂØü„ÇíÂèó„Åë„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ",
        "recommendation_benign": "Áï∞Â∏∏„ÅØË¶ã„Çâ„Çå„Åæ„Åõ„Çì„Åå„ÄÅÂÆöÊúüÁöÑ„Å™Ê§úË®∫„Çí„ÅäÂãß„ÇÅ„Åó„Åæ„Åô„ÄÇ",
        "pdf_title": "ÁöÆËÜö„Åå„ÇìËß£ÊûêÁµêÊûú",
        "pdf_result": "ÁµêÊûú",
        "pdf_confidence": "Êé®ÂÆö‰ø°È†ºÂ∫¶",
        "pdf_recommendation": "Êé®Â•®‰∫ãÈ†Ö",
        "pdf_image_label": "Ëß£Êûê„Åï„Çå„ÅüÁîªÂÉè"
    },
    "‰∏≠Êñá": {
        "title": "ÁöÆËÇ§ÁôåÈ¢ÑÊµãÔºàÊ®°ÊãüÔºâ",
        "upload": "‰∏ä‰º†ÁöÆËÇ§ÁóÖÂèòÂõæÂÉè",
        "button": "ÂàÜÊûêÂõæÂÉè",
        "result": "ÁªìÊûúÔºàÊ®°ÊãüÔºâ",
        "confidence": "‰º∞ËÆ°ÁΩÆ‰ø°Â∫¶",
        "download": "‰∏ãËΩΩPDF",
        "error": "‚ùå ÂõæÂÉèÂ§ÑÁêÜÂá∫Èîô„ÄÇËØ∑Á°Æ‰øùÊñá‰ª∂ÊúâÊïà„ÄÇ",
        "chart": "ÊåâÊ®°ÂûãÁöÑÁΩÆ‰ø°Âõæ",
        "recommendation_malignant": "Âª∫ËÆÆÂ∞±ËØäÁöÆËÇ§ÁßëÂåªÁîüËøõË°å‰∏ì‰∏öËØÑ‰º∞„ÄÇ",
        "recommendation_benign": "Êú™Ê£ÄÊµãÂà∞ÂºÇÂ∏∏ËøπË±°Ôºå‰ΩÜÂª∫ËÆÆÂÆöÊúüÊ£ÄÊü•„ÄÇ",
        "pdf_title": "ÁöÆËÇ§ÁôåÂàÜÊûêÁªìÊûú",
        "pdf_result": "ÁªìÊûú",
        "pdf_confidence": "‰º∞ËÆ°ÁΩÆ‰ø°Â∫¶",
        "pdf_recommendation": "Âª∫ËÆÆ",
        "pdf_image_label": "ÂàÜÊûêÂõæÂÉè"
    }
}

# --- Simulated prediction ---
def simulate_prediction(image, model_name):
    np.random.seed(len(model_name) + len(image.getbands()))
    confidence = np.random.uniform(50, 100)
    label = "Malignant" if confidence > 70 else "Benign"
    return label, confidence

# --- PDF generation ---
def generate_pdf(result, confidence, language, image):
    t = translations[language]
    buffer = io.BytesIO()
    image.save(buffer, format='JPEG')
    image_bytes = buffer.getvalue()
    image_path = "temp.jpg"
    with open(image_path, "wb") as f:
        f.write(image_bytes)

    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", size=14)
    pdf.cell(200, 10, txt=t["pdf_title"], ln=True, align='C')
    pdf.ln(10)
    pdf.cell(200, 10, txt=f"{t['pdf_result']}: {result}", ln=True)
    pdf.cell(200, 10, txt=f"{t['pdf_confidence']}: {confidence:.2f}%", ln=True)
    pdf.cell(200, 10, txt=f"{t['pdf_recommendation']}: {t['recommendation_malignant' if result == 'Malignant' else 'recommendation_benign']}", ln=True)
    pdf.ln(10)
    pdf.cell(200, 10, txt=t["pdf_image_label"], ln=True)
    pdf.image(image_path, x=10, y=None, w=100)
    return pdf.output(dest='S').encode('latin1')

# --- UI ---
lang = st.sidebar.selectbox("üåê Language / Idioma / Langue", list(translations.keys()))
t = translations[lang]
model_options = ["CNN", "Random Forest", "Regresi√≥n Lineal"]
selected_model = st.sidebar.selectbox("üß† Model", model_options)

st.title(t["title"])
st.markdown(f"**{t['upload']}**")
uploaded_file = st.file_uploader("", type=["jpg", "jpeg", "png", "bmp", "webp", "tiff", "jfif", "tif"])

if uploaded_file:
    try:
        image = Image.open(uploaded_file)
        st.image(image, caption=t["upload"], use_column_width=True)

        if st.button(t["button"]):
            results = {}
            for model in model_options:
                label, confidence = simulate_prediction(image, model)
                results[model] = (label, confidence)

            sel_label, sel_conf = results[selected_model]
            st.success(f"{t['result']}: {sel_label}")
            st.info(f"{t['confidence']}: {sel_conf:.1f}%")

            st.subheader("üìä " + t["chart"])
            fig, ax = plt.subplots()
            ax.bar(results.keys(), [c for _, c in results.values()], color=["green", "blue", "orange"])
            ax.set_ylabel('%')
            ax.set_ylim(0, 100)
            st.pyplot(fig)

            pdf_bytes = generate_pdf(sel_label, sel_conf, lang, image)
            b64_pdf = base64.b64encode(pdf_bytes).decode()
            href = f'<a href="data:application/pdf;base64,{b64_pdf}" download="prediction_report.pdf">{t["download"]}</a>'
            st.markdown(href, unsafe_allow_html=True)

    except UnidentifiedImageError:
        st.error(t["error"])
    except Exception as e:
        st.error(f"{t['error']} ({str(e)})")
